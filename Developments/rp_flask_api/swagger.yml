# swagger.yml
openapi: 3.0.0
info: # info начинает область действия информационного блока API:
  title: "RP Flask REST API" # заголовок, включенный в систему пользовательского интерфейса, сгенерированную Connexion
  description: "An API about people and notes" # описание того, что API дает возможность сделать
  version: "1.0.0" # значение версии API

servers:
  - url: "/api" # добавляем серверы и URL-адреса, которые определяют корневой путь API:
  
components: # это строительные блоки в нашей спецификации OpenAPI, на которые мы можем ссылаться из других частей спецификации.
  schemas:
    Person:
      type: "object" # тип данных
      required: # требуемые свойства
        - lname
      properties:
        fname: #  имя персонажа
          type: "string"
        lname: #  его «фамилия»
          type: "string"
  parameters:
    lname:
      name: "lname"
      description: "Last name of the person to get"
      in: path
      required: True
      schema:
        type: "string"
        
paths: # определяет конфигурацию URL-адреса для каждой конечной точки API:
  /people: # относительный URL-адрес конечной точки API
    get: #  HTTP-метод, которому будет отвечать конечная точка по этому URL-адресу
      operationId: "people.read_all" # функция Python, которая отвечает на запрос
      tags: # теги, связанные с данной конечной точкой; они позволяют группировать операции в пользовательском интерфейсе
        - "People"
      summary: "Read the list of people" # отображаемый текст пользовательского интерфейса для данной конечной точки
      responses: # коды состояния, которые посылает данная конечная точка
        "200":
          description: "Successfully read people list"
    post:
      operationId: "people.create"
      tags:
        - People
      summary: "Create a person"
      requestBody:
          description: "Person to create"
          required: True
          content:
            application/json: # application/json как формат обмена данными нашего API.
              schema:
                x-body-name: "person"
                $ref: "#/components/schemas/Person"
      responses:
        "201": # HTTP 201 является успешным ответом, указывающим на создание нового ресурса.
          description: "Successfully created person"
  /people/{lname}:
    get:
      operationId: "people.read_one"
      tags:
        - People
      summary: "Read one person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "200":
          description: "Successfully read person"
    put:
      tags:
        - People
      operationId: "people.update"
      summary: "Update a person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "200":
          description: "Successfully updated person"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "person"
              $ref: "#/components/schemas/Person"
    delete:
      tags:
        - People
      operationId: "people.delete"
      summary: "Delete a person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "204":
          description: "Successfully deleted person"